.TH "MeshTex" 3 "Wed May 19 2021" "The OpenGL Window Demo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MeshTex
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBMesh\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMeshTex\fP ()"
.br
.RI "Empty constructor\&. "
.ti -1c
.RI "\fB~MeshTex\fP ()"
.br
.RI "Deallocate buffers and arrays\&. "
.ti -1c
.RI "void \fBsetData\fP (\fBVertex\fP *\fBvertices\fP, GLuint *\fBindices\fP, vector< \fBTexture\fP >\fBtextures\fP, int \fBvertSize\fP, int indexSize, bool \fBinstanced\fP=false, int \fBquantity\fP=1, \fBShader\fP *\fBshader\fP=nullptr)"
.br
.RI "Provide the class with the data it need\&. vertices : The vertex array\&. indices : The index array\&. textures : The texture vector\&. vertSize : The number of vertices\&. indexSize : The number of indices\&. instanced : The instancing flag\&. quantity : The number of instances\&. shader : The shader\&. "
.ti -1c
.RI "void \fBDraw\fP (\fBShader\fP *\fBshader\fP, glm::mat4 view, glm::mat4 projection, glm::mat4 model, vector< \fBPointLight\fP > lights, vector< \fBSpotLight\fP >spotLights, vec3 viewPos, int startIndex=0, bool diffOnly=true, float gamma=1\&.0f)"
.br
.RI "Pass in the data from the \fBModel\fP class to be realized here\&. shader is an instance of the shader class\&. view is the position and orientation of the camera\&. projection is the perspective for which I use the perspective funcition of GLM in the camera class\&. model is the position and orientation of the mesh being drawn\&. lights are point lights defined by the \fBPointLight\fP structure\&. spotLights are spotlights defined by the \fBSpotLight\fP structure\&. viewPos is the camera position\&. startIndex is the current index of the textures being used\&. diffOnly when set to true will provide an image without specular highlights\&. gamma controls brightness of the textured mesh\&. "
.ti -1c
.RI "void \fBDraw\fP (\fBShader\fP *\fBshader\fP, mat4 view, mat4 projection, vector< mat4 >model, vector< \fBPointLight\fP > lights, vector< \fBSpotLight\fP >spotLights, vec3 viewPos, int startIndex=0, bool diffOnly=true, float gamma=1\&.0f)"
.br
.RI "A virtual function implemented and used by both classes to draw instanced data\&. The only difference from the above is that the model variable is a vector\&. shader is an instance of the shader class\&. view is the position and orientation of the camera\&. projection is the perspective for which I use the perspective funcition of GLM in the camera class\&. model is the position and orientation of the mesh being drawn\&. lights are point lights defined by the \fBPointLight\fP structure\&. spotLights are spotlights defined by the \fBSpotLight\fP structure\&. viewPos is the camera position\&. startIndex is the current index of the textures being used\&. diffOnly when set to true will provide an image without specular highlights\&. gamma controls brightness of the textured mesh\&. "
.ti -1c
.RI "void \fBdumpData\fP ()"
.br
.RI "For debugging\&. "
.ti -1c
.RI "void \fBsetupMesh\fP ()"
.br
.RI "Create the mesh data as an OpenGL buffer object\&. "
.ti -1c
.RI "void \fBprintVec3\fP (vec3 vecVal)"
.br
.RI "For debugging: Print a vector of three floats\&. "
.ti -1c
.RI "void \fBprintMat4\fP (mat4 matVal)"
.br
.RI "For debugging: Print a 4x4 matrix of floats\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBVertex\fP * \fBvertices\fP"
.br
.ti -1c
.RI "GLuint * \fBindices\fP"
.br
.RI "The index array\&. "
.ti -1c
.RI "vector< \fBTexture\fP > \fBtextures\fP"
.br
.RI "The associated textures as a vector\&. "
.ti -1c
.RI "GLuint \fBVAO\fP"
.br
.RI "The buffer object handles\&. "
.ti -1c
.RI "GLuint \fBVBO\fP [2]"
.br
.ti -1c
.RI "GLuint \fBEBO\fP"
.br
.ti -1c
.RI "int \fBvertSize\fP"
.br
.RI "The upper bounds of the various buffers\&. "
.ti -1c
.RI "int \fBindexSize\fP"
.br
.ti -1c
.RI "int \fBtexSize\fP"
.br
.ti -1c
.RI "bool \fBdebug1\fP = false"
.br
.RI "Copious debug data\&. "
.in -1c
.SH "Detailed Description"
.PP 
that encapsulates creating and displaying of a textured mesh\&. 
.SH "Member Function Documentation"
.PP 
.SS "void MeshTex::Draw (\fBShader\fP * shader, mat4 view, mat4 projection, vector< mat4 > model, vector< \fBPointLight\fP > lights, vector< \fBSpotLight\fP > spotLights, vec3 viewPos, int startIndex = \fC0\fP, bool diffOnly = \fCtrue\fP, float gamma = \fC1\&.0f\fP)\fC [virtual]\fP"

.PP
A virtual function implemented and used by both classes to draw instanced data\&. The only difference from the above is that the model variable is a vector\&. shader is an instance of the shader class\&. view is the position and orientation of the camera\&. projection is the perspective for which I use the perspective funcition of GLM in the camera class\&. model is the position and orientation of the mesh being drawn\&. lights are point lights defined by the \fBPointLight\fP structure\&. spotLights are spotlights defined by the \fBSpotLight\fP structure\&. viewPos is the camera position\&. startIndex is the current index of the textures being used\&. diffOnly when set to true will provide an image without specular highlights\&. gamma controls brightness of the textured mesh\&. Draw the object\&. Bind appropriate textures Here we allow for the three types of textures: Diffuse, specular and binormal or bumpmap\&.
.PP
\fBTexture\fP present\&.
.PP
Pass the image indices and cube distances\&. 
.PP
Reimplemented from \fBMesh\fP\&.
.SS "void MeshTex::setupMesh ()\fC [virtual]\fP"

.PP
Create the mesh data as an OpenGL buffer object\&. Allocate the vertex array and index buffer\&. Uniform buffer to feed the uniform\&. 
.PP
Reimplemented from \fBMesh\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBVertex\fP* MeshTex::vertices"
Class global variables\&. The \fBVertex\fP array\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for The OpenGL Window Demo from the source code\&.
